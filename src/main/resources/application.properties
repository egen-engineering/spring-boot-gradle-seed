# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/marketplace_db?useSSL=false
server.port = 8090
server.contextPath=/api
#logging.level.org.springframework.web=DEBUG

cors.allowed-headers=Authorization, Origin, X-Requested-With, WWW-Authenticate, Content-Type
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH
cors.allowed-origins=http://localhost:3000,http://localhost:63342,http://run.plnkr.co,chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop,chrome-extension://aicmkgpgakddgnaphhhpliifpcfhicfo

# Username and password
spring.datasource.username = webAppFb
spring.datasource.password = .WebFB@egen0987.

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=true
# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect